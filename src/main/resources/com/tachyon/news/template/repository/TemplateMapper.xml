<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tachyon.news.template.repository.TemplateMapper">
    <!--    <resultMap id="userResultMap" type="com.tachyon.news.template.model.User">-->
    <!--        <result property="userid" column="userid"/>-->
    <!--        <result property="userid" column="userid"/>-->
    <!--        <collection property="keywords" ofType="String">-->
    <!--            <result property="keyword" column="keyword"/>-->
    <!--        </collection>-->
    <!--    </resultMap>-->


    <select id="findKongsiHalder2" resultType="map" parameterType="string">
        select a.doc_nm, a.doc_url, a.isu_cd, a.acpt_no, a.rpt_nm, a.tns_dt, a.submit_nm
        from kongsiholder a
        where a.doc_no = #{doc_no}
          and a.isu_cd = #{isu_cd}
          and a.acpt_no = #{acpt_no}
    </select>
    <insert id="insertStockHolder" parameterType="map">
        INSERT INTO stockholder (isu_cd, doc_no, owner_name, change_date, before_amt, after_amt, change_amt, unit_price, birth_day, acpt_no)
        VALUES (#{isu_cd}, #{doc_no}, #{owner_name}, #{change_date}, #{before_amt}, #{after_amt}, #{change_amt}, #{unit_price}, #{birth_day}, #{acpt_no})
    </insert>

    <select id="findStockHolder" resultType="int" parameterType="map">
        select count(doc_no)
        from stockholder
        where isu_cd = #{code}
          and owner_name = #{owner_name}
          and birth_day = #{birth_day}
          and before_amt = #{before_amt}
          and after_amt = #{after_amt}
          and DATE_FORMAT(change_date, '%Y%m%d') = #{change_date}
    </select>

    <select id="findBeforeKongsi" resultType="map" parameterType="string">
        select a.doc_nm, a.doc_no
        from kongsiholder a
        where a.acpt_no = #{acptNo}
          and a.isu_cd = #{isuCd}
    </select>

    <delete id="deleteBeforeStockHolder" parameterType="map">
        delete
        from stockholder
        where isu_cd = #{isuCd}
          and doc_no = #{docNo}
    </delete>

    <select id="findName" parameterType="string" resultType="string">
        select isu_nm
        from isu
        where isu_cd = #{isu_cd}
    </select>

    <insert id="insertStaffHolder" parameterType="map">
        INSERT INTO staffholder (kongsi_day, name, gender, birth_day, spot, regi_officer_yn, full_time_yn, responsibilities, major_career, voting_stock, no_voting_stock, service_duration, expiration_date, isu_cd, doc_no, doc_url, acpt_no)
        VALUES (#{kongsi_day}, #{name}, #{gender}, #{birth_day}, #{spot}, #{regi_officer_yn}, #{full_time_yn}, #{responsibilities}, #{major_career}, #{voting_stock}, #{no_voting_stock}, #{service_duration}, #{expiration_date}, #{isu_cd}, #{doc_no},
                #{doc_url}, #{acpt_no})
    </insert>


    <select id="findSimpleStaffHolder" parameterType="map" resultType="map">
        select doc_no, doc_url, acpt_no
        from staffholder
        where kongsi_day = #{kongsi_day}
          and name = #{name}
          and birth_day = #{birth_day}
          and isu_cd = #{isu_cd}
    </select>
    <delete id="deleteBeforeStaffHolder" parameterType="map">
        delete
        from staffholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
    </delete>

    <insert id="insertAccessHolder" parameterType="map">
        INSERT INTO accessholder (id, type, regdate, param1, param2)
        VALUES (#{id}, #{type}, #{regdate}, #{param1}, #{param2})
    </insert>


    <select id="findPurposeHolder" parameterType="string" resultType="int">
        select count(*) count
        from purposeholder
        where isu_cd = #{isu_cd}
          and open_date = #{open_date}
          and type = #{type}
    </select>
    <insert id="insertPurposeHolder1" parameterType="map">
        INSERT INTO purposeholder (isu_cd, open_date, type, purpose, reason, doc_url)
        VALUES (#{isu_cd}, #{open_date}, #{type}, #{purpose}, #{reason}, #{doc_url})
    </insert>
    <insert id="insertPurposeHolder2" parameterType="map">
        INSERT INTO purposeholder (isu_cd, open_date, type, reason, doc_url, before_purp, after_purp)
        VALUES (#{isu_cd}, #{open_date}, #{type}, #{reason}, #{doc_url}, #{before_purp}, #{after_purp})
    </insert>

    <insert id="saveError" parameterType="map">
        INSERT INTO errorholder (from_queue, body, error)
        VALUES (#{from_queue}, #{body}, #{error})
    </insert>


    <select id="findUsers" resultType="map">
        select a.userid,
               ifnull(b.keyword, '') as keyword,
               ifnull(a.grade, 10)   as grade,
               ifnull(c.chat_id, 0)  as chat_id
        from member a
                 left join keywordholder b on a.userid = b.userid and b.useYn = 'Y'
                 left join telegram c on a.userid = c.userid and c.userYn = 'Y'
        where chat_id not in (0)
    </select>

    <select id="findKeywords" resultType="map">
        select a.userid,
               ifnull(b.keyword, '') as keyword,
               ifnull(b.order, 10)   as _order
        from member a
                 left join keywordholder b on a.userid = b.userid and b.useYn = 'Y'
        where b.keyword is not null
        order by _order
    </select>


    <select id="findUser" resultType="int">
        select count(*)
        from member
        where userid = #{userid}
    </select>
    <update id="updateChatId" parameterType="map">
        update telegram
        set chat_id   = #{chat_id}
          , updatedAt = now()
        where userid = #{userid}
    </update>

    <insert id="insertRumor" parameterType="map">
        INSERT INTO rumorholder (isu_cd, doc_no, acpt_no, type, kongsi_dt, contents, title, kongsi_due_dt, media, skip_count, kongsi_res_dt)
        VALUES (#{isu_cd}, #{doc_no}, #{acpt_no}, #{type}, #{kongsi_dt}, #{contents}, #{title}, #{kongsi_due_dt}, #{media}, #{skip_count}, #{kongsi_res_dt})
    </insert>
    <select id="findRumorCount" resultType="int" parameterType="map">
        select count(doc_no)
        from rumorholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
    </select>
    <insert id="insertTelegramHolder" parameterType="map">
        INSERT INTO telegramholder (doc_no, keyword, isu_cd, acpt_no, created_at, processed_yn)
        VALUES (#{doc_no}, #{keyword}, #{isu_cd}, #{acpt_no}, now(), 'N')
    </insert>


    <select id="findNoGroupTelegramHolder" resultType="map">
        select a.doc_no,
               a.keyword,
               a.isu_cd,
               a.acpt_no,
               a.created_at,
               b.doc_nm,
               b.doc_url,
               b.rpt_nm,
               b.tns_dt
        from telegramholder a,
             kongsiholder b
        where a.doc_no = b.doc_no
          and a.isu_cd = b.isu_cd
          and a.acpt_no = b.acpt_no
          and a.processed_yn = 'N'

    </select>

    <update id="completeNoGroupTelegramHolder" parameterType="map">
        update telegramholder
        set processed_yn = 'Y',
            updated_at = now()
        where doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
          and keyword = #{keyword}
    </update>


    <select id="findMemberCode" resultType="map">
        select a.userid,
               ifnull(b.isu_cd, '') as isu_cd
        from member a
                 left join member_code b on a.userid = b.userid and b.use_yn = 'Y'
    </select>

    <select id="findGroupTelegramHolder" resultType="map">
        select a.doc_no,
               a.keyword,
               a.isu_cd,
               a.acpt_no,
               a.created_at,
               b.doc_nm,
               b.doc_url,
               b.rpt_nm,
               b.tns_dt
        from telegramholder a,
             kongsiholder b
        where a.doc_no = b.doc_no
          and a.isu_cd = b.isu_cd
          and a.acpt_no = b.acpt_no
          and a.group_processed_yn = 'N'

    </select>

    <update id="completeGroupTelegramHolder" parameterType="map">
        update telegramholder
        set group_processed_yn = 'Y',
            group_updated_at = now()
        where doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
          and keyword = #{keyword}
    </update>
</mapper>

