<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.tachyon.news.template.repository.TemplateMapper">
    <!--    <resultMap id="userResultMap" type="com.tachyon.news.template.model.User">-->
    <!--        <result property="userid" column="userid"/>-->
    <!--        <result property="userid" column="userid"/>-->
    <!--        <collection property="keywords" ofType="String">-->
    <!--            <result property="keyword" column="keyword"/>-->
    <!--        </collection>-->
    <!--    </resultMap>-->

    <select id="findKongsiHalder2" resultType="map" parameterType="string">
        select a.doc_nm,
               a.doc_url,
               a.isu_cd,
               a.acpt_no,
               a.rpt_nm,
               a.tns_dt,
               a.submit_nm,
               a.temp_rpt_nm,
               (select isu_nm from isu where isu_cd = a.isu_cd) as isu_nm
        from kongsiholder a
        where a.doc_no = #{doc_no}
          and a.isu_cd = #{isu_cd}
          and a.acpt_no = #{acpt_no}

    </select>
    <insert id="insertStockHolder" parameterType="map">
        INSERT INTO stockholder (isu_cd, doc_no, owner_name, change_date, before_amt, after_amt, change_amt, unit_price, birth_day, acpt_no, unit_price2, stock_method, stock_type, acpt_dt,etc,etc2)
        VALUES (#{isu_cd}, #{doc_no}, #{owner_name}, #{change_date}, #{before_amt}, #{after_amt}, #{change_amt}, #{unit_price}, #{birth_day}, #{acpt_no}, #{unit_price2}, #{stock_method}, #{stock_type}, #{acpt_dt},#{etc},#{etc2})
    </insert>

    <select id="findStockHolder" resultType="int" parameterType="map">
        select count(doc_no)
        from stockholder
        where isu_cd = #{code}
          and owner_name = #{owner_name}
          and birth_day = #{birth_day}
          and before_amt = #{before_amt}
          and after_amt = #{after_amt}
          and DATE_FORMAT(change_date, '%Y%m%d') = #{change_date}
    </select>

    <select id="findBeforeKongsi" resultType="map" parameterType="string">
        select a.doc_nm, a.doc_no
        from kongsiholder a
        where a.acpt_no = #{acptNo}
          and a.isu_cd = #{isuCd}
    </select>

    <delete id="deleteBeforeStockHolder" parameterType="map">
        delete
        from stockholder
        where isu_cd = #{isuCd}
          and doc_no = #{docNo}
    </delete>

    <select id="findName" parameterType="string" resultType="string">
        select isu_nm
        from isu
        where isu_cd = #{isu_cd}
    </select>

    <insert id="insertStaffHolder" parameterType="map">
        INSERT INTO staffholder (kongsi_day, name, gender, birth_day, spot, regi_officer_yn, full_time_yn, responsibilities, major_career, voting_stock, no_voting_stock, service_duration, expiration_date, isu_cd, doc_no, doc_url, acpt_no)
        VALUES (#{kongsi_day}, #{name}, #{gender}, #{birth_day}, #{spot}, #{regi_officer_yn}, #{full_time_yn}, #{responsibilities}, #{major_career}, #{voting_stock}, #{no_voting_stock}, #{service_duration}, #{expiration_date}, #{isu_cd}, #{doc_no},
                #{doc_url}, #{acpt_no})
    </insert>


    <select id="findSimpleStaffHolder" parameterType="map" resultType="map">
        select doc_no, doc_url, acpt_no
        from staffholder
        where kongsi_day = #{kongsi_day}
          and name = #{name}
          and birth_day = #{birth_day}
          and isu_cd = #{isu_cd}
    </select>
    <delete id="deleteBeforeStaffHolder" parameterType="map">
        delete
        from staffholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
    </delete>

    <insert id="insertAccessHolder" parameterType="map">
        INSERT INTO accessholder (id, type, regdate, param1, param2)
        VALUES (#{id}, #{type}, #{regdate}, #{param1}, #{param2})
    </insert>


    <select id="findPurposeHolder" parameterType="string" resultType="int">
        select count(*) count
        from purposeholder
        where isu_cd = #{isu_cd}
          and open_date = #{open_date}
          and type = #{type}
    </select>
    <insert id="insertPurposeHolder1" parameterType="map">
        INSERT INTO purposeholder (isu_cd, open_date, type, purpose, reason, doc_url)
        VALUES (#{isu_cd}, #{open_date}, #{type}, #{purpose}, #{reason}, #{doc_url})
    </insert>
    <insert id="insertPurposeHolder2" parameterType="map">
        INSERT INTO purposeholder (isu_cd, open_date, type, reason, doc_url, before_purp, after_purp)
        VALUES (#{isu_cd}, #{open_date}, #{type}, #{reason}, #{doc_url}, #{before_purp}, #{after_purp})
    </insert>

    <insert id="saveError" parameterType="map">
        INSERT INTO errorholder (from_queue, body, error)
        VALUES (#{from_queue}, #{body}, #{error})
    </insert>


    <select id="findUsers" resultType="map">
        select a.userid,
               ifnull(b.keyword, '') as keyword,
               ifnull(a.grade, 10)   as grade,
               ifnull(c.chat_id, 0)  as chat_id,
               ifnull(c.bot_seq, -1) as bot_seq
        from member a
                 left join keywordholder b on a.userid = b.userid and b.useYn = 'Y'
                 left join telegram c on a.userid = c.userid and c.userYn = 'Y'
        where chat_id not in (0)
    </select>

    <select id="findKeywords" resultType="map">
        select a.userid,
               ifnull(b.keyword, '') as keyword,
               ifnull(b.order, 10)   as _order
        from member a
                 left join keywordholder b on a.userid = b.userid and b.useYn = 'Y'
        where b.keyword is not null
        order by _order
    </select>


    <select id="findUser" resultType="int">
        select count(*)
        from member
        where userid = #{userid}
    </select>
    <update id="updateChatId" parameterType="map">
        update telegram
        set chat_id   = #{chat_id}
          , updatedAt = now()
        where userid = #{userid}
    </update>

    <insert id="insertRumor" parameterType="map">
        INSERT INTO rumorholder (isu_cd, doc_no, acpt_no, type, kongsi_dt, contents, title, kongsi_due_dt, media, skip_count, kongsi_res_dt)
        VALUES (#{isu_cd}, #{doc_no}, #{acpt_no}, #{type}, #{kongsi_dt}, #{contents}, #{title}, #{kongsi_due_dt}, #{media}, #{skip_count}, #{kongsi_res_dt})
    </insert>
    <select id="findRumorCount" resultType="int" parameterType="map">
        select count(doc_no)
        from rumorholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
    </select>
    <insert id="insertTelegramHolder" parameterType="map">
        INSERT INTO telegramholder (doc_no, keyword, isu_cd, acpt_no, created_at, processed_yn)
        VALUES (#{doc_no}, #{keyword}, #{isu_cd}, #{acpt_no}, now(), 'N')
    </insert>


    <select id="findNoGroupTelegramHolder" resultType="map">
        select a.doc_no,
               a.keyword,
               a.isu_cd,
               a.acpt_no,
               a.created_at,
               b.doc_nm,
               b.doc_url,
               b.rpt_nm,
               b.tns_dt
        from telegramholder a,
             kongsiholder b
        where a.doc_no = b.doc_no
          and a.isu_cd = b.isu_cd
          and a.acpt_no = b.acpt_no
          and a.processed_yn = 'N'
        order by b.tns_dt limit 30

    </select>

    <update id="completeNoGroupTelegramHolder" parameterType="map">
        update telegramholder
        set processed_yn = 'Y',
            updated_at   = now()
        where doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
          and keyword = #{keyword}
    </update>


    <select id="findMemberCode" resultType="map">
        select a.userid,
               ifnull(b.isu_cd, '') as isu_cd
        from member a
                 left join member_code b on a.userid = b.userid and b.use_yn = 'Y'
    </select>

    <select id="findGroupTelegramHolder" resultType="map">
        select a.doc_no,
               a.keyword,
               a.isu_cd,
               a.acpt_no,
               a.created_at,
               b.doc_nm,
               b.doc_url,
               b.rpt_nm,
               b.tns_dt
        from telegramholder a,
             kongsiholder b
        where a.doc_no = b.doc_no
          and a.isu_cd = b.isu_cd
          and a.acpt_no = b.acpt_no
          and a.group_processed_yn = 'N'
        order by b.tns_dt limit 9
    </select>

    <update id="completeGroupTelegramHolder" parameterType="map">
        update telegramholder
        set group_processed_yn = 'Y',
            group_updated_at   = now()
        where doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
          and keyword = #{keyword}
    </update>

    <select id="findBots" resultType="map">
        select a.seq,
               a.name,
               a.token
        from telegrambot a
        where use_yn = 'Y'
    </select>

    <select id="findClose" resultType="int" parameterType="map">
        select close
        from stock_data
        where code = #{code}
          and date = #{date}
    </select>

    <insert id="insertExpiration" parameterType="map">
        INSERT INTO expirationholder (name, birthday, isu_cd, changeday, doc_no, acpt_no, doc_url)
        VALUES (#{name}, #{birthday}, #{isu_cd}, #{changeday}, #{doc_no}, #{acpt_no}, #{doc_url})
    </insert>
    <select id="findExpirationCount" resultType="int" parameterType="map">
        select count(*)
        from expirationholder
        where name = #{name}
          and birthday = #{birthday}
          and isu_cd = #{isu_cd}
          and changeday = #{changeday}
    </select>

    <select id="findTelegramHolder" resultType="int" parameterType="map">
        select count(*)
        from telegramholder
        where doc_no = #{doc_no}
          and keyword = #{keyword}
          and acpt_no = #{acpt_no}
    </select>
    <delete id="deleteOverlapRumor" parameterType="map">
        delete
        from rumorholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
          and acpt_no = #{acpt_no}
    </delete>

    <select id="findChangeWithTelegram" resultType="map" parameterType="map">
        select a.owner_name, a.before_amt, a.after_amt, a.unit_price,a.birth_day,a.stock_type
        from stockholder a,
             telegramholder b
        where a.doc_no = b.doc_no
          and a.isu_cd = b.isu_cd
          and a.acpt_no = b.acpt_no
          and a.doc_no = #{doc_no}
          and a.isu_cd = #{isu_cd}
          and a.acpt_no = #{acpt_no}
    </select>

    <select id="findRssPubDateCount" resultType="int" parameterType="string">
        select count(*)
        from rsspubholder
        where pub_date = #{pub_date}
    </select>

    <insert id="insertRssPubDate" parameterType="string">
        INSERT INTO rsspubholder (pub_date)
        VALUES (#{pub_date})
    </insert>
    <delete id="deleteBeforeLargestStockHolder" parameterType="map">
        delete
        from largeststockholder
        where isu_cd = #{isuCd}
          and doc_no = #{docNo}
    </delete>
    <insert id="insertLargestStockHolder" parameterType="map">
        INSERT INTO largeststockholder (name, birthday, isu_cd, changedate, gender, homeabroad, relation, doubleup1, doubleup2, generalstockcnt, generalratio, kindstockcnt, kindratio, stockdepositorycnt, stockdepositoryratio, firststockratio, doc_no,
                                        acpt_no, firststockcnt, nationality)
        VALUES (#{name}, #{birthday}, #{isu_cd}, #{changedate}, #{gender}, #{homeabroad}, #{relation}, #{doubleup1}, #{doubleup2}, #{generalstockcnt}, #{generalratio}, #{kindstockcnt}, #{kindratio}, #{stockdepositorycnt}, #{stockdepositoryratio},
                #{firststockratio}, #{doc_no}, #{acpt_no}, #{firststockcnt}, #{nationality})
    </insert>

    <select id="findLargestStockHolderCount" resultType="int" parameterType="map">
        select count(*)
        from largeststockholder
        where name = #{name}
          and birthday = #{birthday}
          and isu_cd = #{isu_cd}
          and changedate = #{changedate}
    </select>


    <delete id="deleteBeforeRelativeHolder" parameterType="map">
        delete
        from relativeholder
        where isu_cd = #{isuCd}
          and doc_no = #{docNo}
    </delete>

    <select id="findRelativeHolderCount" resultType="int" parameterType="map">
        select count(*)
        from relativeholder
        where name = #{name}
          and birth = #{birth}
          and isu_cd = #{isu_cd}
          and change_date = #{change_date}
    </select>
    <insert id="insertRelativeHolder" parameterType="map">
        INSERT INTO relativeholder (name, birth, isu_cd, gender, homeabroad, nationality, relation_him, address, job, relation_com, doc_no, acpt_no, change_date, new_yn)
        VALUES (#{name}, #{birth}, #{isu_cd}, #{gender}, #{homeabroad}, #{nationality}, #{relation_him}, #{address}, #{job}, #{relation_com}, #{doc_no}, #{acpt_no}, #{change_date}, #{new_yn})
    </insert>

    <select id="findRelativeWithTelegram" resultType="map" parameterType="map">
        select a.name,
               a.birth,
               a.gender,
               a.homeabroad,
               a.nationality,
               a.relation_him,
               a.address,
               a.job,
               a.relation_com
        from relativeholder a,
             telegramholder b
        where a.doc_no = b.doc_no
          and a.isu_cd = b.isu_cd
          and a.acpt_no = b.acpt_no
          and a.doc_no = #{doc_no}
          and a.isu_cd = #{isu_cd}
          and a.acpt_no = #{acpt_no}
          and b.keyword = 'RELATIVE'
    </select>
    <select id="findRelativeCount" resultType="map" parameterType="map">
        <![CDATA[
        select doc_no, acpt_no
        from relativeholder
        where name = #{name}
          and birth = #{birth}
          and isu_cd = #{isu_cd}
          and doc_no <> #{doc_no}
          and acpt_no <> #{acpt_no} limit 1
        ]]>
    </select>
    <select id="findKrRssPubDateCount" resultType="int" parameterType="string">
        select count(*)
        from krrsspubholder
        where pub_date = #{pub_date}
    </select>

    <insert id="insertKrRssPubDate" parameterType="string">
        INSERT INTO krrsspubholder (pub_date)
        VALUES (#{pub_date})
    </insert>

    <select id="findStaff" parameterType="map" resultType="int">
        select count(*)
        from staffholder
        where kongsi_day = #{kongsi_day}
          and name = #{name}
          and birth_day = #{birth_day}
          and isu_cd = #{isu_cd}
    </select>
    <insert id="insertStaff" parameterType="map">
        INSERT INTO staffholder (kongsi_day, name, birth_day, spot, isu_cd, doc_no, acpt_no, doc_url)
        VALUES (#{kongsi_day}, #{name}, #{birth_day}, #{spot}, #{isu_cd}, #{doc_no}, #{acpt_no}, #{doc_url})
    </insert>
    <update id="updateStockHolderBirthDay" parameterType="map">
        update stockholder
        set birth_day = #{birth_day2}
        where isu_cd = #{code}
          and owner_name = #{owner_name}
          and birth_day = #{birth_day}
          and before_amt = #{before_amt}
          and after_amt = #{after_amt}
          and DATE_FORMAT(change_date, '%Y%m%d') = #{change_date}
    </update>

    <!--findRelativeHodlerSize-->
    <select id="findRelativeHodlerSize" resultType="int" parameterType="map">
        select count(seq)
        from relativeholder
        where name = #{name}
          and birth = #{birth}
          and isu_cd = #{isu_cd}
    </select>
    <!--    findDupStockCountOnSameKind-->
    <select id="findDupStockCountOnSameKind" resultType="int" parameterType="map">
        <![CDATA[
        select count(b.seq)
        from kongsiholder a,
             (
                 select seq, isu_cd, doc_no, acpt_no
                 from stockholder
                 where isu_cd = #{code}
                   and owner_name = #{owner_name}
                   and birth_day = #{birth_day}
                   and before_amt = #{before_amt}
                   and after_amt = #{after_amt}
                   and DATE_FORMAT(change_date, '%Y%m%d') = #{change_date}
             ) b
        where a.acpt_no = b.acpt_no
          and a.isu_cd = b.isu_cd
          and a.doc_no = b.doc_no
          and a.temp_rpt_nm = #{temp_rpt_nm}
        ]]>
    </select>
    <select id="findDupStockSeqOnSameKind" resultType="long" parameterType="map">
        <![CDATA[
        select b.seq
        from kongsiholder a,
             (
                 select seq, isu_cd, doc_no, acpt_no
                 from stockholder
                 where isu_cd = #{code}
                   and owner_name = #{owner_name}
                   and birth_day = #{birth_day}
                   and before_amt = #{before_amt}
                   and after_amt = #{after_amt}
                   and DATE_FORMAT(change_date, '%Y%m%d') = #{change_date}
             ) b
        where a.acpt_no = b.acpt_no
          and a.isu_cd = b.isu_cd
          and a.doc_no = b.doc_no
          and a.temp_rpt_nm = #{temp_rpt_nm}
        ]]>
    </select>


<!--    findDupStockCountOnOtherKind-->
    <select id="findDupStockCountOnOtherKind" resultType="int" parameterType="map">
        <![CDATA[
        select count(b.seq)
        from kongsiholder a,
             (
                 select seq, isu_cd, doc_no, acpt_no
                 from stockholder
                 where isu_cd = #{code}
                   and owner_name = #{owner_name}
                   and birth_day = #{birth_day}
                   and before_amt = #{before_amt}
                   and after_amt = #{after_amt}
             ) b
        where a.acpt_no = b.acpt_no
          and a.isu_cd = b.isu_cd
          and a.doc_no = b.doc_no
          and a.temp_rpt_nm <> #{temp_rpt_nm}
        ]]>
    </select>
    <select id="findDupStockSeqOnOtherKind" resultType="long" parameterType="map">
        <![CDATA[
        select b.seq
        from kongsiholder a,
             (
                 select seq, isu_cd, doc_no, acpt_no
                 from stockholder
                 where isu_cd = #{code}
                   and owner_name = #{owner_name}
                   and birth_day = #{birth_day}
                   and before_amt = #{before_amt}
                   and after_amt = #{after_amt}
             ) b
        where a.acpt_no = b.acpt_no
          and a.isu_cd = b.isu_cd
          and a.doc_no = b.doc_no
          and a.temp_rpt_nm <> #{temp_rpt_nm}
        ]]>
    </select>
<!--    findStaffCount-->
    <select id="findStaffCount" resultType="int" parameterType="map">
        <![CDATA[
        select count(a.seq)
        from staffholder a
        where a.isu_cd = #{isuCd}
          and a.name = #{name}
          and a.birth_day = #{birth}
        ]]>
    </select>

<!--    findLastDayStaffCount-->
    <select id="findLastDayStaffCount" resultType="int" parameterType="map">
        <![CDATA[
        select count(a.seq)
        from staffholder a
        where a.isu_cd = #{isuCd}
          and a.name = #{name}
          and a.birth_day = #{birth_day}
          and a.kongsi_day = #{kongsi_day}
        ]]>
    </select>

    <select id="findCode" parameterType="string" resultType="string">
        select isu_cd
        from isu
        where isu_nm = #{isu_nm}
    </select>
    <delete id="deleteBeforePerfHolder" parameterType="map">
        delete
        from perfholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
    </delete>
    <!--    findDuplicatePerf-->
    <select id="findDuplicatePerf" resultType="int" parameterType="map">
        select count(seq)
        from perfholder
        where doc_no = #{doc_no}
          and isu_cd = #{isu_cd}
          and acpt_no = #{acpt_no}
    </select>
    <!--    insertPerf-->

    <insert id="insertPerf" parameterType="map">
        INSERT INTO perfholder (seq, dang_mae_dang, dang_mae_nu, dang_yeong_dang, dang_yeong_nu, dang_beob_dang, dang_beob_nu, dang_dang_dang, dang_dang_nu, dang_ji_dang, dang_ji_nu, sil_mae_dang, sil_mae_nu, sil_yeong_dang, sil_yeong_nu, sil_beob_dang, sil_beob_nu, sil_dang_dang, sil_dang_nu, sil_ji_dang, sil_ji_nu, yul_mae_dang, yul_mae_nu, yul_yeong_dang, yul_yeong_nu, yul_beob_dang, yul_beob_nu, yul_dang_dang, yul_dang_nu, yul_ji_dang, yul_ji_nu, jeon_sil_mae_dang, jeon_sil_mae_nu, jeon_sil_yeong_dang, jeon_sil_yeong_nu, jeon_sil_beob_dang, jeon_sil_beob_nu, jeon_sil_dang_dang, jeon_sil_dang_nu, jeon_sil_ji_dang, jeon_sil_ji_nu, jeon_jeung_mae_dang, jeon_jeung_mae_nu, jeon_jeung_yeong_dang, jeon_jeung_yeong_nu, jeon_jeung_beob_dang, jeon_jeung_beob_nu, jeon_jeung_dang_dang, jeon_jeung_dang_nu, jeon_jeung_ji_dang, jeon_jeung_ji_nu, unit1, unit2, provider, subject, provider_date, provider_positon, contact, isu_cd, doc_no, acpt_no, acpt_dt,quarter,quarter_tp,year)
        VALUES (#{seq},#{dang_mae_dang},#{dang_mae_nu},#{dang_yeong_dang},#{dang_yeong_nu},#{dang_beob_dang},#{dang_beob_nu},#{dang_dang_dang},#{dang_dang_nu},#{dang_ji_dang},#{dang_ji_nu},#{sil_mae_dang},#{sil_mae_nu},#{sil_yeong_dang},#{sil_yeong_nu},#{sil_beob_dang},#{sil_beob_nu},#{sil_dang_dang},#{sil_dang_nu},#{sil_ji_dang},#{sil_ji_nu},#{yul_mae_dang},#{yul_mae_nu},#{yul_yeong_dang},#{yul_yeong_nu},#{yul_beob_dang},#{yul_beob_nu},#{yul_dang_dang},#{yul_dang_nu},#{yul_ji_dang},#{yul_ji_nu},#{jeon_sil_mae_dang},#{jeon_sil_mae_nu},#{jeon_sil_yeong_dang},#{jeon_sil_yeong_nu},#{jeon_sil_beob_dang},#{jeon_sil_beob_nu},#{jeon_sil_dang_dang},#{jeon_sil_dang_nu},#{jeon_sil_ji_dang},#{jeon_sil_ji_nu},#{jeon_jeung_mae_dang},#{jeon_jeung_mae_nu},#{jeon_jeung_yeong_dang},#{jeon_jeung_yeong_nu},#{jeon_jeung_beob_dang},#{jeon_jeung_beob_nu},#{jeon_jeung_dang_dang},#{jeon_jeung_dang_nu},#{jeon_jeung_ji_dang},#{jeon_jeung_ji_nu},#{unit1},#{unit2},#{provider},#{subject},#{provider_date},#{provider_positon},#{contact},#{isu_cd},#{doc_no},#{acpt_no},#{acpt_dt},#{quarter},#{quarter_tp},#{year})
    </insert>
<!--    insertDupStock-->
    <insert id="insertDupStock" parameterType="map">
        INSERT INTO stockdupholder (isu_cd, doc_no, acpt_no, doc_url, stock_seq)
        VALUES (#{isu_cd}, #{doc_no}, #{acpt_no}, #{doc_url}, #{stock_seq})
    </insert>
<!--    findDupStockCount-->
    <select id="findDupStockCount" resultType="int" parameterType="map">
        select count(seq)
        from stockdupholder
        where doc_no = #{doc_no}
          and isu_cd = #{isu_cd}
          and acpt_no = #{acpt_no}
    </select>

    <insert id="insertTrotHolder" parameterType="map">
        INSERT INTO trotholder (isu_cd, doc_no, acpt_no, isu_nm, keyword,sigan,date_sigan)
        VALUES (#{isu_cd}, #{doc_no}, #{acpt_no}, #{isu_nm}, #{keyword},#{sigan},#{date_sigan})
    </insert>

    <insert id="insertKongsiHolder" parameterType="map">
        INSERT INTO kongsiholder (isu_cd,doc_no, doc_nm, doc_url, doc_type, tns_dt, acpt_no, rpt_nm,acpt_dt,submit_nm,temp_rpt_nm)
        VALUES ( #{isu_cd},#{doc_no}, #{doc_nm}, #{doc_url}, #{doc_type}, #{tns_dt}, #{acpt_no}, #{rpt_nm},#{acpt_dt},#{submit_nm},#{temp_rpt_nm});
    </insert>

    <select id="findKongsiCount" parameterType="map" resultType="int">
        select count(*) from kongsiholder where isu_cd = #{isu_cd} and doc_no = #{doc_no} and acpt_no=#{acpt_no}
    </select>

    <delete id="deleteBeforeTakingHolder" parameterType="map">
        delete
        from takingholder
        where isu_cd = #{isu_cd}
          and doc_no = #{doc_no}
    </delete>

    <select id="fincTakingHolderCount" parameterType="map" resultType="int">
        select count(*)
        from takingholder
        where isu_cd = #{isu_cd}
          and name = #{name}
          and birth=#{birth}
          and owner_capital=#{owner_capital}
          and borrow_amount=#{borrow_amount}
          and etc=#{etc}
    </select>

    <insert id="insertTakingHolder" parameterType="map">
        INSERT INTO takingholder (acpt_dt,name, birth, owner_capital, borrowings, etc, sum,resource,borrower,borrow_amount,borrow_period,collateral,doc_no,isu_cd,acpt_no,type,err_msg,spot)
        VALUES ( #{acpt_dt},#{name}, #{birth}, #{owner_capital}, #{borrowings}, #{etc}, #{sum}, #{resource},#{borrower},#{borrow_amount},#{borrow_period},#{collateral},#{doc_no},#{isu_cd},#{acpt_no},#{type},#{err_msg},#{spot})
    </insert>
</mapper>

